// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  cognitoId         String   @unique
  email             String   @unique
  name              String
  role              UserRole @default(STUDENT)
  status            UserStatus @default(ACTIVE)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentAmount     Int      @default(0)
  transactionId     String?
  fcmToken          String?
  enrollmentDate    DateTime @default(now())
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  enrollments       Enrollment[]
  sessions          Session[] @relation("SessionParticipants")
  sessionsCreated   Session[] @relation("SessionCreator")
  submissions       AssignmentSubmission[]
  chatMessages      ChatMessage[]
  notifications     Notification[]
  analytics         AnalyticsEvent[]
  videoProgress     VideoProgress[] @relation("VideoProgressStudent")
  mentorProfile     MentorProfile?
  assignmentsCreated Assignment[] @relation("AssignmentCreator")
  studentNotes      StudentNote[] @relation("StudentNoteMentor")
  notesReceived     StudentNote[] @relation("StudentNoteStudent")
  availability      MentorAvailability[]
  messagesSent      Message[] @relation("MessageSender")
  messagesReceived  Message[] @relation("MessageRecipient")
  announcementsCreated Announcement[] @relation("AnnouncementCreator")
  announcementRecipients AnnouncementRecipient[] @relation("AnnouncementRecipient")
  liveSessionsCreated LiveSession[] @relation("LiveSessionMentor")
  liveSessionParticipations LiveSessionParticipant[] @relation("LiveSessionParticipant")

  @@map("users")
}

model Program {
  id          String   @id @default(cuid())
  name        String
  description String
  duration    Int      // in months
  price       Int      // in paise
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  modules     Module[]
  enrollments Enrollment[]

  @@map("programs")
}

model Module {
  id          String   @id @default(cuid())
  programId   String
  title       String
  description String
  order       Int
  duration    Int      // in weeks
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  sessions    Session[]
  assignments Assignment[]

  @@map("modules")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  programId String
  status    EnrollmentStatus @default(ACTIVE)
  startDate DateTime @default(now())
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([userId, programId])
  @@map("enrollments")
}

model Session {
  id          String      @id @default(cuid())
  moduleId    String
  title       String
  description String?
  type        SessionType @default(LIVE)
  status      SessionStatus @default(SCHEDULED)
  startTime   DateTime
  endTime     DateTime
  maxParticipants Int     @default(100)
  ivsChannelArn String?
  recordingUrl String?
  videoS3Key  String?     // S3 object key for recorded video
  duration    Int?        // Video duration in seconds
  orderIndex  Int         @default(0) // Order within module
  isLive      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  creator     User        @relation("SessionCreator", fields: [creatorId], references: [id])
  creatorId   String
  participants User[]     @relation("SessionParticipants")
  chatMessages ChatMessage[]
  analytics   AnalyticsEvent[]
  videoProgress VideoProgress[]

  @@map("sessions")
}

model Assignment {
  id          String   @id @default(cuid())
  moduleId    String
  mentorId    String
  title       String
  description String
  type        AssignmentType @default(SUBMISSION)
  maxScore    Int      @default(100)
  dueDate     DateTime
  fileTypes   String[]
  gradingRubric Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  mentor      User     @relation("AssignmentCreator", fields: [mentorId], references: [id])
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           String   @id @default(cuid())
  assignmentId String
  userId       String
  content      String?
  files        Json?
  score        Int?
  feedback     String?
  audioFeedback String?
  status       SubmissionStatus @default(SUBMITTED)
  submittedAt  DateTime @default(now())
  gradedAt     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, userId])
  @@map("assignment_submissions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  userId    String
  content   String
  type      MessageType @default(TEXT)
  createdAt DateTime @default(now())

  // Relations
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  event     String
  properties Json?
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model VideoProgress {
  id            String   @id @default(cuid())
  studentId     String
  sessionId     String
  watchedSeconds Int     @default(0)
  completed     Boolean  @default(false)
  lastWatched   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  student       User     @relation("VideoProgressStudent", fields: [studentId], references: [id], onDelete: Cascade)
  session       Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([studentId, sessionId])
  @@map("video_progress")
}

model MentorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  bio               String?
  designation       String?
  expertise         String[]
  socialLinks       Json?
  yearsExperience   Int?
  certifications    Json?
  profilePicture    String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mentor_profiles")
}

model StudentNote {
  id          String   @id @default(cuid())
  mentorId    String
  studentId   String
  note        String
  category    String?
  isPrivate   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  mentor      User     @relation("StudentNoteMentor", fields: [mentorId], references: [id], onDelete: Cascade)
  student     User     @relation("StudentNoteStudent", fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_notes")
}

model MentorAvailability {
  id          String   @id @default(cuid())
  mentorId    String
  dayOfWeek   Int      // 0 = Sunday, 1 = Monday, etc.
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  sessionType String   // "individual", "group", "office_hours"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  mentor      User     @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@map("mentor_availability")
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  content     String
  type        MessageType @default(TEXT)
  attachments Json?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender      User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Announcement {
  id             String   @id @default(cuid())
  creatorId      String
  title          String
  content        String
  targetAudience String   @default("all") // "all", "specific", "cohort"
  scheduledAt    DateTime?
  isPublished    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  creator        User     @relation("AnnouncementCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  recipients     AnnouncementRecipient[]

  @@map("announcements")
}

model AnnouncementRecipient {
  id             String   @id @default(cuid())
  announcementId String
  studentId      String
  isRead         Boolean  @default(false)
  readAt         DateTime?
  createdAt      DateTime @default(now())

  // Relations
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  student        User         @relation("AnnouncementRecipient", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([announcementId, studentId])
  @@map("announcement_recipients")
}

// Enums
enum UserRole {
  STUDENT
  MENTOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum SessionType {
  LIVE
  RECORDED
  WORKSHOP
  QNA
}

enum SessionStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum AssignmentType {
  SUBMISSION
  QUIZ
  PROJECT
  PEER_REVIEW
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  SESSION_REMINDER
  ASSIGNMENT_DUE
  NEW_MESSAGE
  PAYMENT_SUCCESS
  SYSTEM_UPDATE
}

model LiveSession {
  id                    String   @id @default(cuid())
  title                 String
  description           String?
  mentorId              String
  scheduledAt           DateTime
  duration              Int      // in minutes
  status                LiveSessionStatus @default(SCHEDULED)
  maxParticipants        Int      @default(50)
  currentParticipants   Int      @default(0)
  recordingUrl          String?
  meetingUrl            String
  meetingId             String
  passcode              String?
  channelArn            String?
  stageArn              String?
  streamKey             String?
  isRecorded            Boolean  @default(true)
  chatEnabled           Boolean  @default(true)
  screenEnabled         Boolean  @default(true)
  breakoutRoomsEnabled  Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  mentor                User     @relation("LiveSessionMentor", fields: [mentorId], references: [id])
  participants          LiveSessionParticipant[]

  @@map("live_sessions")
}

model LiveSessionParticipant {
  id          String   @id @default(cuid())
  sessionId   String
  studentId   String
  status      ParticipantStatus @default(INVITED)
  joinedAt    DateTime?
  leftAt      DateTime?
  duration    Int?     // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  session     LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student     User        @relation("LiveSessionParticipant", fields: [studentId], references: [id])

  @@unique([sessionId, studentId])
  @@map("live_session_participants")
}

enum LiveSessionStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  INVITED
  JOINED
  LEFT
}